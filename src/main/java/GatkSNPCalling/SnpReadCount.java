package GatkSNPCalling;


import SamtoolsPileupSNPCalling.AseInference;
import SamtoolsPileupSNPCalling.BinarySearchTree;
import SamtoolsPileupSNPCalling.VcfTreeNode;

import java.io.*;
import java.util.HashMap;

public class SnpReadCount {
    private String refGenomeFilePath, sortedBamFile, samtools;
    private File gatkSnpFile, samtoolReadCountFile, outputSnpReadFile;
    private HashMap<String, BinarySearchTree> snpTrees;

    /**
     *
     * @param refGenomeFilePath reference genome fasta file
     * @param sortedBamFile sorted bam file generate by STAR
     * @param samtools samtools executive file
     * @param gatkSnpFile SNP sites which are called by GATK
     */
    public SnpReadCount(String refGenomeFilePath, String sortedBamFile, String samtools, String gatkSnpFile) {
        this.refGenomeFilePath = refGenomeFilePath;
        this.sortedBamFile = sortedBamFile;
        File outputDir = new File(sortedBamFile).getParentFile();
        this.samtoolReadCountFile = new File(outputDir.getAbsolutePath(), "alleleAbundant.txt");
        this.samtools = samtools;
        this.gatkSnpFile = new File(gatkSnpFile);
        this.outputSnpReadFile = new File(sortedBamFile.substring(0, sortedBamFile.lastIndexOf("_"))+"SnpRead.txt");
        this.snpTrees = new HashMap<>();
    }

    /**
     * get GATK SNP reads counts
     */
    public void gatkSnpReads() {
        this.countRead();
        this.gatkSnpTree();
        this.mapSnpWithReadCount();
    }

    /**
     * use samtools get reads count for each RNA-Seq snp, the input file is sorted bam file which is generated by STAR
     */
    public void countRead() {
        AseInference.inferenceASE(this.refGenomeFilePath, this.sortedBamFile, this.samtools);
    }

    /**
     * establish binary search trees for each chromosome. The snp file is generated by GATK software
     */
    public void gatkSnpTree() {
        // gatk vcf: 1	15820	.	G	T	114.74
        // alleleAbundant: 1	1047082	T	65	0	16	49	0	0  A C T G
        BufferedReader bfr;

        try {
            bfr = new BufferedReader(
                    new InputStreamReader(new FileInputStream(this.gatkSnpFile))
            );

            String line = "";
            while (line != null){
                line = bfr.readLine();
                if (line != null) {
                    if (line.startsWith("#"))
                        continue;
                    String[] lineInfo = line.split("\t");
                    String chrNum = lineInfo[0];
                    VcfTreeNode vtn = new VcfTreeNode(Integer.parseInt(lineInfo[1]), lineInfo[2], lineInfo[3], lineInfo[4]);
                    if (!this.snpTrees.containsKey(chrNum)) {
                        this.snpTrees.put(chrNum, new BinarySearchTree());
                    }
                    BinarySearchTree bt = this.snpTrees.get(chrNum);
                    this.snpTrees.put(chrNum, bt.insertNode(bt, vtn));
                }
            }
        } catch (FileNotFoundException fne) {
            fne.printStackTrace();
            System.exit(2);
        } catch (IOException ie) {
            ie.printStackTrace();
            System.exit(3);
        }
    }

    /**
     * map GATK SNP site with its reads count,the output file's columns are
     * chrNum, position, refNc, altNc, refRead, altRead
     */
    public void mapSnpWithReadCount() {
        BufferedReader bfr;
        BufferedWriter bfw;

        try {
            bfw = new BufferedWriter(
                    new OutputStreamWriter(new FileOutputStream(this.outputSnpReadFile, true))
            );

            bfr = new BufferedReader(
                    new InputStreamReader(new FileInputStream(this.samtoolReadCountFile))
            );

            String line = "";
            String newLine;
            HashMap<String, String> baseRead = new HashMap<>();
            while (line != null) {
                line = bfr.readLine();
                String[] lineInfo = line.split("\t");
                String chrNum = lineInfo[0];
                int position = Integer.parseInt(lineInfo[1]);
                String refNc = lineInfo[2];
                baseRead.put("A", lineInfo[4]);
                baseRead.put("C", lineInfo[5]);
                baseRead.put("T", lineInfo[6]);
                baseRead.put("G", lineInfo[7]);
                BinarySearchTree bt = this.snpTrees.getOrDefault(chrNum, null);
                if (bt != null) {
                    VcfTreeNode resultNode = bt.search(bt.root, position);
                    if (resultNode.refNucleotide.equals(refNc)) {
                        String altNc = resultNode.altNucleotide;
                        String refRead = baseRead.getOrDefault(refNc, "0");
                        String altRead = baseRead.getOrDefault(altNc, "0");
                        if (refRead.equals("0") | altRead.equals("0"))
                            continue;
                        String[] strings = new String[] {chrNum, Integer.toString(position), refNc, altNc, refRead, altRead};
                        StringBuffer sb = new StringBuffer();
                        for (String str : strings) {
                            sb.append(str).append("\t");
                        }
                        newLine = sb.toString();
                        bfw.write(newLine);
                        bfw.newLine();
                    }
                }
            }
        } catch (FileNotFoundException fne) {
            fne.printStackTrace();
            System.exit(2);
        } catch (IOException ie) {
            ie.printStackTrace();
            System.exit(3);
        }

    }
}

